I want to build a MERN stack web application for a PC Part Shop as an MVP. Please scaffold the project with the following requirements:

ðŸ”¹ Tech Stack

MongoDB (local) for database.

Express.js for backend REST API.

React.js with Vite for frontend.

Node.js as runtime.

Tailwind CSS for simple, minimal styling.

dotenv for environment variables (store backend endpoint + DB connection string).

ðŸ”¹ Core Functionality (MVP Focus)

Authentication:

JWT-based login and register.

Roles: Admin and Customer.

Products (PC Parts):

Admin can add, edit, delete products (fields: name, category, brand, model, price, stock, description, image).

Customer can browse and search products.

User Frontend Pages:

Home Page â†’ show featured/new products.

All Products Page â†’ list all products with pagination.

Category Page â†’ filter products by category (CPU, GPU, RAM, SSD, etc.).

Product Detail Page â†’ full product details with brand/model selection + add to cart.

Cart & Checkout:

Customers can add/remove items in cart.

Checkout flow (basic, no payment gateway yet).

Orders:

Customers â†’ view their order history.

Admin â†’ manage all orders (update status: pending, shipped, completed).

Dashboards:

Admin Dashboard â†’ manage products & orders.

Customer Dashboard â†’ profile & orders.

ðŸ”¹ Environment Variables (.env)

Backend should have:

PORT=5000
MONGO_URI=mongodb://127.0.0.1:27017/pcpartshop
JWT_SECRET=your_jwt_secret
CLIENT_URL=http://localhost:5173


Frontend should have:

VITE_API_URL=http://localhost:5000/api

ðŸ”¹ Full Project Structure
pc-part-shop/
â”‚
â”œâ”€â”€ backend/
â”‚   â”œâ”€â”€ .env
â”‚   â”œâ”€â”€ package.json
â”‚   â”œâ”€â”€ server.js
â”‚   â”œâ”€â”€ config/
â”‚   â”‚   â””â”€â”€ db.js
â”‚   â”œâ”€â”€ models/
â”‚   â”‚   â”œâ”€â”€ User.js
â”‚   â”‚   â”œâ”€â”€ Product.js
â”‚   â”‚   â””â”€â”€ Order.js
â”‚   â”œâ”€â”€ routes/
â”‚   â”‚   â”œâ”€â”€ authRoutes.js
â”‚   â”‚   â”œâ”€â”€ productRoutes.js
â”‚   â”‚   â””â”€â”€ orderRoutes.js
â”‚   â”œâ”€â”€ controllers/
â”‚   â”‚   â”œâ”€â”€ authController.js
â”‚   â”‚   â”œâ”€â”€ productController.js
â”‚   â”‚   â””â”€â”€ orderController.js
â”‚   â”œâ”€â”€ middleware/
â”‚   â”‚   â”œâ”€â”€ authMiddleware.js
â”‚   â”‚   â””â”€â”€ errorMiddleware.js
â”‚   â””â”€â”€ utils/
â”‚       â””â”€â”€ seedData.js
â”‚
â”œâ”€â”€ frontend/   (React + Vite)
â”‚   â”œâ”€â”€ .env
â”‚   â”œâ”€â”€ package.json
â”‚   â”œâ”€â”€ vite.config.js
â”‚   â”œâ”€â”€ tailwind.config.js
â”‚   â”œâ”€â”€ postcss.config.js
â”‚   â””â”€â”€ src/
â”‚       â”œâ”€â”€ main.jsx
â”‚       â”œâ”€â”€ App.jsx
â”‚       â”œâ”€â”€ index.css
â”‚       â”œâ”€â”€ components/
â”‚       â”‚   â”œâ”€â”€ Navbar.jsx
â”‚       â”‚   â”œâ”€â”€ Footer.jsx
â”‚       â”‚   â”œâ”€â”€ ProductCard.jsx
â”‚       â”‚   â””â”€â”€ Loader.jsx
â”‚       â”œâ”€â”€ pages/
â”‚       â”‚   â”œâ”€â”€ Home.jsx
â”‚       â”‚   â”œâ”€â”€ Products.jsx
â”‚       â”‚   â”œâ”€â”€ Category.jsx
â”‚       â”‚   â”œâ”€â”€ ProductDetail.jsx
â”‚       â”‚   â”œâ”€â”€ Cart.jsx
â”‚       â”‚   â”œâ”€â”€ Checkout.jsx
â”‚       â”‚   â”œâ”€â”€ Dashboard/
â”‚       â”‚   â”‚   â”œâ”€â”€ AdminDashboard.jsx
â”‚       â”‚   â”‚   â””â”€â”€ UserDashboard.jsx
â”‚       â”‚   â””â”€â”€ Auth/
â”‚       â”‚       â”œâ”€â”€ Login.jsx
â”‚       â”‚       â””â”€â”€ Register.jsx
â”‚       â”œâ”€â”€ context/
â”‚       â”‚   â”œâ”€â”€ AuthContext.jsx
â”‚       â”‚   â””â”€â”€ CartContext.jsx
â”‚       â”œâ”€â”€ hooks/
â”‚       â”‚   â””â”€â”€ useFetch.js
â”‚       â””â”€â”€ utils/
â”‚           â””â”€â”€ api.js
â”‚
â””â”€â”€ README.md


âš¡ Goal:
Build a functional MVP PC Part Shop web app with React + Vite frontend, local MongoDB backend, and backend API endpoint stored in .env. Focus on backend + functionality first, keep UI minimal with Tailwind as the base.

I have created mern stack app with you in a previous chat in another model, and i got some error, below was what you just respond so please continue.

The "View Details" button now works perfectly and shows a comprehensive modal with all order information, customer details, and allows quick status updates!RetryClaude does not have the ability to run the code it generates yet.BThe "View Details" button now works perfectly and shows a comprehensive modal with all order information, customer details, and allows quick status updates! it works, but under order items, there is no product there. please fix also tell me which file you'd like to see.EditThe issue is likely with how the order data structure is being handled in the OrderDetailModal. The order items might not have the correct product information populated from the backend.
I'd like to see your backend order model and order routes to understand the data structure better. Specifically, could you show me:

Backend Order Model (backend/models/Order.js)
Backend Order Routes (backend/routes/orderRoutes.js)
Backend Order Controller (backend/controllers/orderController.js)

This will help me understand:

How orders are structured in your database
Whether product information is being populated correctly
If the API endpoints are returning the right data format

Also, if you could check your browser's Network tab when clicking "View Details" and show me what the API response looks like for the order details call, that would be very helpful.
The most likely issues are:

Products aren't being populated in the order query (missing .populate('items.product'))
The order items structure is different than what the modal expects
The API response format doesn't match what the frontend is trying to access

Once I see the backend files, I can fix the modal to correctly display the order items!

